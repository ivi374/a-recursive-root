version: '3.8'

# ===================================================================
# Docker Compose Template for Web + Database Stack
# ===================================================================
# This template provides a standard setup for a Python web application
# with a PostgreSQL database. Customize as needed for your project.
#
# Usage:
#   1. Copy this file to your project root as docker-compose.yml
#   2. Create a .env file based on templates/env.example
#   3. Run: docker-compose up --build
#   4. Access your app at: http://localhost:5000

services:
  # =================================================================
  # PostgreSQL Database Service
  # =================================================================
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-mydatabase}
      POSTGRES_USER: ${DB_USER:-dbuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-dbpassword}
    volumes:
      # Persist database data
      - postgres_data:/var/lib/postgresql/data
      # Optional: Add initialization scripts
      # - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dbuser}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app_network

  # =================================================================
  # Python Web Application Service
  # =================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask_app
    restart: unless-stopped
    command: gunicorn --bind 0.0.0.0:5000 --workers 4 --timeout 120 app:app
    environment:
      # Pass all environment variables from .env
      FLASK_APP: ${FLASK_APP:-app.py}
      FLASK_ENV: ${FLASK_ENV:-development}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      # Add other environment variables as needed
    volumes:
      # Mount application code for development
      - .:/app
      # Optional: Mount logs directory
      # - ./logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app_network

  # =================================================================
  # Redis Service (Optional - uncomment if needed for caching/Celery)
  # =================================================================
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis_cache
  #   restart: unless-stopped
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   networks:
  #     - app_network

  # =================================================================
  # Celery Worker (Optional - uncomment if using background tasks)
  # =================================================================
  # celery_worker:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: celery_worker
  #   restart: unless-stopped
  #   command: celery -A app.celery worker --loglevel=info
  #   environment:
  #     DATABASE_URL: ${DATABASE_URL}
  #     REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
  #   depends_on:
  #     - db
  #     - redis
  #   volumes:
  #     - .:/app
  #   networks:
  #     - app_network

# ===================================================================
# Volumes for Data Persistence
# ===================================================================
volumes:
  postgres_data:
    driver: local
  # redis_data:
  #   driver: local

# ===================================================================
# Networks
# ===================================================================
networks:
  app_network:
    driver: bridge
